sections:
  section1:
    name: 'Binding to observables'
    description: >
      <b>ReactiveBinder</b> provides an easy way how to bind Vaadin component properties defined in view to
      reactive primitives (such as <b>Rx Observables</b>) defined in view model.<br/>
      This section shows you how you can bind component property to observable.
    viewCode: |
      class DemoView extends ReactiveView<DemoViewModel>
      {
          @Override
          protected void initView(final @Nonnull DemoViewModel viewModel)
          {
              final Label label = new Label();

              bind(valueOf(label)).to(viewModel.getObservable());

              setCompositionRoot(new VerticalLayout(label));
          }
      }
    viewModelCode: |
      class DemoViewModel extends ReactiveViewModel
      {
          private final Observable<String> observable;

          public DemoViewModel()
          {
              this.observable = Observable.just("Hello Reactive Vaadin");
          }

          @Nonnull
          public Observable<String> getObservable()
          {
              return observable;
          }
      }
  section2:
    name: 'Binding to asynchronous observables'
    description: >
      This section shows you how you can bind component property to <b>asynchronous</b> observable (observable which
      performs work on different scheduler then the current thread).
      You can notice that the code looks exactly the same as for synchronous observable in the previous section.
    viewCode: |
      class DemoView extends ReactiveView<DemoViewModel>
      {
          @Override
          protected void initView(final @Nonnull DemoViewModel viewModel)
          {
              final DateTimeField dateTimeField = new DateTimeField();
              dateTimeField.setReadOnly(true);
              dateTimeField.setResolution(DateTimeResolution.SECOND);

              bind(valueOf(dateTimeField)).to(viewModel.getObservable());

              setCompositionRoot(new VerticalLayout(dateTimeField));
          }
      }
    viewModelCode: |
      class DemoViewModel extends ReactiveViewModel
      {
          private final Observable<LocalDateTime> observable;

          public DemoViewModel()
          {
              this.observable = Observable.interval(1, TimeUnit.SECONDS)
                      .map(value -> LocalDateTime.now());
          }

          @Nonnull
          public Observable<LocalDateTime> getObservable()
          {
              return observable;
          }
      }
  section3:
    name: 'Binding custom properties'
    description: >
      This section shows you how you can bind <b>custom</b> component property e.g. property for which
      there doesn't exist any helper like <b>valueOf</b> or you just don't want to use them.
    viewCode: |
      class DemoView extends ReactiveView<DemoViewModel>
      {
          @Override
          protected void initView(final @Nonnull DemoViewModel viewModel)
          {
              final Label label = new Label();

              bind(label::setValue).to(viewModel.getObservable());

              setCompositionRoot(new VerticalLayout(label));
          }
      }
    viewModelCode: |
      class DemoViewModel extends ReactiveViewModel
      {
          private final Observable<String> observable;

          public DemoViewModel()
          {
              this.observable = Observable.interval(1, TimeUnit.SECONDS)
                      .map(Object::toString);
          }

          @Nonnull
          public Observable<String> getObservable()
          {
              return observable;
          }
      }
  section4:
    name: 'One-way binding between component properties'
    description: >
      This section shows you how you can <b>one-way</b> bind component properties to each other.
    viewCode: |
      class DemoView extends ReactiveView<DemoViewModel>
      {
          @Override
          protected void initView(final @Nonnull DemoViewModel viewModel)
          {
              final CheckBox checkBox = new CheckBox("Enabled", true);
              final TextField textField = new TextField();

              bind(enabledOf(textField)).to(valueOf(checkBox));

              setCompositionRoot(new VerticalLayout(checkBox, textField));
          }
      }
    viewModelCode: |
      class DemoViewModel extends ReactiveViewModel
      {}

  section5:
    name: 'Two-way binding between component properties'
    description: >
      This section shows you how you can <b>two-way</b> bind component properties to each other.
      The reason it works is that <b>valueOf</b> for <b>TextField</b> returns not only the property
      (which is used to set value), but also an observable (which is used to listen for value changes).
    viewCode: |
      class DemoView extends ReactiveView<DemoViewModel>
      {
          @Override
          protected void initView(final @Nonnull DemoViewModel viewModel)
          {
              final TextField textFieldA = new TextField();
              textFieldA.setPlaceholder("Type...");

              final TextField textFieldB = new TextField();
              textFieldB.setPlaceholder("Type...");

              bind(valueOf(textFieldA)).to(valueOf(textFieldB));

              setCompositionRoot(new VerticalLayout(textFieldA, textFieldB));
          }
      }
    viewModelCode: |
      class DemoViewModel extends ReactiveViewModel
      {}

  section6:
    name: 'Handling errors'
    description: >
      <b>ReactiveBinder</b> passes all unhandled errors to <b>handleError</b> method of <b>ReactiveView</b> which
      logs them with <b>ERROR</b> level by default.<br/>
      This section shows you how you can change this behavior and <b>handle errors</b> signalled from reactive binder
      by yourself.
    viewCode: |
      class DemoView extends ReactiveView<DemoViewModel>
      {
          @Override
          protected void initView(final @Nonnull DemoViewModel viewModel)
          {
              final Label label = new Label();
              final Button button = new Button("Bind", event ->
                      bind(valueOf(label)).to(viewModel.getObservable()));

              setCompositionRoot(new VerticalLayout(label, button));
          }

          @Override
          public void handleError(final @Nonnull Throwable error)
          {
              Notification.show("Unexpected error", error.getMessage(),
                      Type.ERROR_MESSAGE);
          }
      }
    viewModelCode: |
      class DemoViewModel extends ReactiveViewModel
      {
          private final Observable<String> observable;

          public DemoViewModel()
          {
              this.observable = Observable.error(
                      new RuntimeException("Error inside observable"));
          }

          @Nonnull
          public Observable<String> getObservable()
          {
              return observable;
          }
      }
  section7:
    name: 'Handling subscriptions'
    description: >
      <b>ReactiveView</b> activates all subscriptions made by reactive binder when the view is
      <b>attached</b> to UI. It also automatically disposes and clears active subscriptions when the view is
      <b>detached</b> from UI. <br/>
      This section shows you how you can change this behavior and dispose subscription returned by reactive
      binder whenever you want.
    viewCode: |
      class DemoView extends ReactiveView<DemoViewModel>
      {
          @Override
          protected void initView(final @Nonnull DemoViewModel viewModel)
          {
              final Label label = new Label();

              final Disposable disposable =
                      bind(valueOf(label)).to(viewModel.getObservable());

              final Button button = new Button("Dispose");
              button.addClickListener(event -> {
                  disposable.dispose();
                  button.setEnabled(false);
              });

              setCompositionRoot(new VerticalLayout(label, button));
          }
      }
    viewModelCode: |
      class DemoViewModel extends ReactiveViewModel
      {
          private final Observable<String> observable;

          public DemoViewModel()
          {
              this.observable = Observable.interval(1, TimeUnit.SECONDS)
                      .map(Object::toString);
          }

          @Nonnull
          public Observable<String> getObservable()
          {
              return observable;
          }
      }